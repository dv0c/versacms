// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?    @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updateAt       DateTime   @updatedAt
  role           String     @default("user")
  sessions       Session[]
  accounts       Account[]
  Post           Post[]
  Category       Category[]
  Api            Api[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id         String   @id @map("_id")
  authorId   String   @db.ObjectId
  categoryId String[]

  title      String
  content    Json?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  published  Boolean    @default(false)
  api        Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[] @relation(fields: [categoryId], references: [id])
}

model Category {
  id       String   @id @map("_id")
  authorId String   @db.ObjectId
  postId   String[]

  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  posts     Post[]   @relation(fields: [postId], references: [id])
}

model Api {
  id       String  @id @map("_id")
  authorId String  @db.ObjectId
  model     String?
  type     String  @default("free")
  status   String  @default("Active")

  name      String   @unique
  requests  Int      @default(0)
  limit     Int      @default(200)
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
